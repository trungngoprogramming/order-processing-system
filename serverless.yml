service: order-processing-system

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    SNS_TOPIC_ARN: !Ref OrderProcessingTopic
    SECRETS_MANAGER_ARN: !Ref OrderProcessingSecrets
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref OrderProcessingTopic
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - !GetAtt OrderProcessingQueue.Arn
            - !GetAtt EmailQueue.Arn
            - !GetAtt InventoryQueue.Arn
            - !GetAtt OrderProcessingDLQ.Arn
            - !GetAtt EmailDLQ.Arn
            - !GetAtt InventoryDLQ.Arn
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: !GetAtt OrdersTable.Arn
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: !Ref OrderProcessingSecrets
        - Effect: Allow
          Action:
            - cloudwatch:PutMetricData
          Resource: "*"

functions:
  # Lambda xác thực Stripe webhook
  stripeWebhook:
    handler: src/handlers/stripe_webhook.handler
    events:
      - http:
          path: /webhook/stripe
          method: post
          cors: true
    environment:
      SNS_TOPIC_ARN: !Ref OrderProcessingTopic

  # Lambda xử lý đơn hàng
  orderProcessor:
    handler: src/handlers/order_processor.handler
    events:
      - sqs:
          arn: !GetAtt OrderProcessingQueue.Arn
          batchSize: 10
          maximumBatchingWindowInSeconds: 5
    environment:
      ORDERS_TABLE: !Ref OrdersTable

  # Lambda gửi email
  emailProcessor:
    handler: src/handlers/email_processor.handler
    events:
      - sqs:
          arn: !GetAtt EmailQueue.Arn
          batchSize: 10
          maximumBatchingWindowInSeconds: 5

  # Lambda thông báo kho
  inventoryProcessor:
    handler: src/handlers/inventory_processor.handler
    events:
      - sqs:
          arn: !GetAtt InventoryQueue.Arn
          batchSize: 10
          maximumBatchingWindowInSeconds: 5

resources:
  Resources:
    # SNS Topic chính
    OrderProcessingTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-order-processing

    # SQS Queues và DLQs
    OrderProcessingDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-order-processing-dlq
        MessageRetentionPeriod: 1209600 # 14 days

    OrderProcessingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-order-processing
        VisibilityTimeoutSeconds: 300
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt OrderProcessingDLQ.Arn
          maxReceiveCount: 3

    EmailDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-email-dlq
        MessageRetentionPeriod: 1209600

    EmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-email
        VisibilityTimeoutSeconds: 300
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt EmailDLQ.Arn
          maxReceiveCount: 3

    InventoryDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-inventory-dlq
        MessageRetentionPeriod: 1209600

    InventoryQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-inventory
        VisibilityTimeoutSeconds: 300
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt InventoryDLQ.Arn
          maxReceiveCount: 3

    # SNS Subscriptions
    OrderProcessingSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref OrderProcessingTopic
        Endpoint: !GetAtt OrderProcessingQueue.Arn
        FilterPolicy:
          event_type: ["order_created", "order_updated"]

    EmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref OrderProcessingTopic
        Endpoint: !GetAtt EmailQueue.Arn
        FilterPolicy:
          event_type: ["order_created", "payment_confirmed"]

    InventorySubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref OrderProcessingTopic
        Endpoint: !GetAtt InventoryQueue.Arn
        FilterPolicy:
          event_type: ["order_created", "inventory_update"]

    # SQS Policies cho SNS
    OrderProcessingQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref OrderProcessingQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt OrderProcessingQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref OrderProcessingTopic

    EmailQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref EmailQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt EmailQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref OrderProcessingTopic

    InventoryQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref InventoryQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt InventoryQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref OrderProcessingTopic

    # DynamoDB Table
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-orders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: order_id
            AttributeType: S
          - AttributeName: customer_id
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: order_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: customer-index
            KeySchema:
              - AttributeName: customer_id
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # Secrets Manager
    OrderProcessingSecrets:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}-${self:provider.stage}-secrets
        Description: "Secrets for order processing system"
        SecretString: !Sub |
          {
            "stripe_webhook_secret": "whsec_your_stripe_webhook_secret_here",
            "stripe_api_key": "sk_test_your_stripe_api_key_here",
            "ses_from_email": "noreply@yourdomain.com"
          }

    # CloudWatch Alarms cho monitoring SQS
    OrderProcessingQueueAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-order-queue-messages
        AlarmDescription: "Monitor messages in order processing queue"
        MetricName: ApproximateNumberOfVisibleMessages
        Namespace: AWS/SQS
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 100
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: QueueName
            Value: !GetAtt OrderProcessingQueue.QueueName

    EmailQueueAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-email-queue-messages
        AlarmDescription: "Monitor messages in email queue"
        MetricName: ApproximateNumberOfVisibleMessages
        Namespace: AWS/SQS
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 50
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: QueueName
            Value: !GetAtt EmailQueue.QueueName

    InventoryQueueAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-inventory-queue-messages
        AlarmDescription: "Monitor messages in inventory queue"
        MetricName: ApproximateNumberOfVisibleMessages
        Namespace: AWS/SQS
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 50
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: QueueName
            Value: !GetAtt InventoryQueue.QueueName

    # DLQ Alarms
    OrderProcessingDLQAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-order-dlq-messages
        AlarmDescription: "Monitor messages in order processing DLQ"
        MetricName: ApproximateNumberOfVisibleMessages
        Namespace: AWS/SQS
        Statistic: Average
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: QueueName
            Value: !GetAtt OrderProcessingDLQ.QueueName

  Outputs:
    ApiGatewayRestApiId:
      Value: !Ref ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-api-id

    ApiGatewayRestApiRootResourceId:
      Value: !GetAtt ApiGatewayRestApi.RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-root-resource-id

    OrderProcessingTopicArn:
      Value: !Ref OrderProcessingTopic
      Export:
        Name: ${self:service}-${self:provider.stage}-sns-topic-arn

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true
