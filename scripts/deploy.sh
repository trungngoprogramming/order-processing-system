#!/bin/bash

# Script deploy h·ªá th·ªëng order processing
# S·ª≠ d·ª•ng: ./scripts/deploy.sh [stage] [region] [secure]
# V√≠ d·ª•: ./scripts/deploy.sh dev ap-southeast-1 secure

set -e  # Exit on any error

# Default values
STAGE=${1:-dev}
REGION=${2:-ap-southeast-1}
SECURE=${3:-basic}

if [ "$SECURE" = "secure" ]; then
    STACK_NAME="order-processing-system-secure-$STAGE"
    TEMPLATE_FILE="cloudformation-secure.yaml"
    echo "üîí Deploying SECURE Order Processing System"
else
    STACK_NAME="order-processing-system-$STAGE"
    TEMPLATE_FILE="cloudformation-template.yaml"
    echo "üöÄ Deploying Order Processing System (Basic)"
fi

echo "Stack Name: $STACK_NAME"
echo "Stage: $STAGE"
echo "Region: $REGION"
echo "Template: $TEMPLATE_FILE"

# Ki·ªÉm tra dependencies
echo "üìã Checking dependencies..."

# Ki·ªÉm tra AWS CLI
if ! command -v aws &> /dev/null; then
    echo "‚ùå AWS CLI not found. Please install AWS CLI first."
    exit 1
fi

# Ki·ªÉm tra AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå AWS credentials not configured. Please run 'aws configure' first."
    exit 1
fi

# Ki·ªÉm tra template file t·ªìn t·∫°i
if [ ! -f "$TEMPLATE_FILE" ]; then
    echo "‚ùå Template file not found: $TEMPLATE_FILE"
    exit 1
fi

if [ "$SECURE" = "secure" ]; then
    echo "üèóÔ∏è Deploying secure infrastructure v·ªõi CloudFormation..."
    echo "  ‚úÖ VPC v·ªõi Public/Private Subnets"
    echo "  ‚úÖ NAT Gateway cho Private Subnets"
    echo "  ‚úÖ VPC Endpoints cho AWS services"
    echo "  ‚úÖ Security Groups v·ªõi Least Privilege"
    echo "  ‚úÖ IAM Roles v·ªõi Least Privilege"
    echo "  ‚úÖ Encrypted SQS, SNS, DynamoDB, Secrets"
    echo ""
    
    # Deploy secure CloudFormation stack
    aws cloudformation deploy \
        --template-file $TEMPLATE_FILE \
        --stack-name $STACK_NAME \
        --region $REGION \
        --capabilities CAPABILITY_NAMED_IAM \
        --parameter-overrides Stage=$STAGE VpcCidr=10.0.0.0/16
else
    echo "üèóÔ∏è Deploying basic infrastructure v·ªõi CloudFormation..."
    
    # Deploy basic CloudFormation stack
    aws cloudformation deploy \
        --template-file $TEMPLATE_FILE \
        --stack-name $STACK_NAME \
        --region $REGION \
        --capabilities CAPABILITY_NAMED_IAM \
        --parameter-overrides Stage=$STAGE
fi

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ Deployment completed successfully!"
    echo ""
    
    # L·∫•y th√¥ng tin outputs
    echo "üìä Stack Information:"
    aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $REGION \
        --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
        --output table 2>/dev/null || echo "No outputs available"
    
    echo ""
    echo "üìã Deployment Summary:"
    echo "  Stack Name: $STACK_NAME"
    echo "  Stage: $STAGE"
    echo "  Region: $REGION"
    echo "  Template: $TEMPLATE_FILE"
    
    if [ "$SECURE" = "secure" ]; then
        echo "  Security: üîí SECURE (VPC + Least Privilege + Encryption)"
        echo ""
        echo "üîê Security Features Implemented:"
        echo "  ‚úÖ VPC v·ªõi Public (10.0.1.0/24, 10.0.2.0/24) v√† Private Subnets (10.0.10.0/24, 10.0.11.0/24)"
        echo "  ‚úÖ NAT Gateway cho outbound traffic t·ª´ Private Subnets"
        echo "  ‚úÖ VPC Endpoints cho DynamoDB, S3, SNS, SQS, Secrets Manager"
        echo "  ‚úÖ Security Groups ch·ªâ cho ph√©p traffic c·∫ßn thi·∫øt"
        echo "  ‚úÖ IAM Roles v·ªõi Least Privilege cho t·ª´ng Lambda function"
        echo "  ‚úÖ Encryption at rest cho DynamoDB, SQS, SNS, Secrets Manager"
        echo "  ‚úÖ CloudWatch monitoring v√† alarms"
    else
        echo "  Security: ‚ö†Ô∏è  BASIC (No VPC, Basic IAM)"
    fi
    
    echo ""
    # L·∫•y Webhook URL t·ª´ outputs
    WEBHOOK_URL=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`WebhookUrl`].OutputValue' \
        --output text 2>/dev/null || echo "Not available")
    
    if [ "$WEBHOOK_URL" != "Not available" ] && [ "$WEBHOOK_URL" != "None" ]; then
        echo ""
        echo "üîó Stripe Webhook URL: $WEBHOOK_URL"
    fi
    
    echo ""
    echo "üîß Next Steps:"
    echo "1. C·∫≠p nh·∫≠t Secrets Manager v·ªõi Stripe credentials:"
    echo "   aws secretsmanager update-secret \\"
    echo "     --secret-id $STACK_NAME-secrets \\"
    echo "     --secret-string '{\"stripe_webhook_secret\":\"whsec_your_secret\",\"stripe_api_key\":\"sk_your_key\",\"ses_from_email\":\"your@email.com\"}' \\"
    echo "     --region $REGION"
    echo ""
    echo "2. Verify SES email address:"
    echo "   aws ses verify-email-identity --email-address your@email.com --region $REGION"
    echo ""
    
    if [ "$WEBHOOK_URL" != "Not available" ] && [ "$WEBHOOK_URL" != "None" ]; then
        echo "3. Configure Stripe webhook endpoint:"
        echo "   Webhook URL: $WEBHOOK_URL"
        echo "   Events: checkout.session.completed, payment_intent.succeeded, invoice.payment_succeeded"
        echo ""
        echo "4. Update Lambda function code (hi·ªán t·∫°i ch·ªâ l√† placeholder):"
        echo "   aws lambda update-function-code --function-name $STACK_NAME-stripe-webhook --zip-file fileb://lambda-code.zip --region $REGION"
        echo ""
    fi
    
    if [ "$SECURE" = "secure" ]; then
        echo "3. Deploy Lambda functions v√†o Private Subnets (c·∫ßn th√™m b∆∞·ªõc n√†y)"
        echo ""
        echo "4. Test security v·ªõi penetration testing"
        echo ""
        echo "üõ°Ô∏è Security Checklist:"
        echo "  ‚úÖ VPC v·ªõi Public/Private Subnets"
        echo "  ‚úÖ Least Privilege IAM Roles"
        echo "  ‚úÖ No hardcoded secrets (s·ª≠ d·ª•ng Secrets Manager)"
        echo "  ‚úÖ Encryption at rest v√† in transit"
        echo "  ‚úÖ Network isolation v·ªõi Security Groups"
        echo "  ‚úÖ VPC Endpoints ƒë·ªÉ tr√°nh Internet traffic"
        echo "  ‚úÖ CloudWatch monitoring v√† alerting"
        echo "  ‚úÖ Dead Letter Queues cho error handling"
    else
        echo "3. Configure Stripe webhook endpoint (c·∫ßn API Gateway)"
        echo ""
        echo "4. Test the system:"
        echo "   ./scripts/test_webhook.sh $STAGE $REGION"
        echo ""
        echo "üí° ƒê·ªÉ deploy phi√™n b·∫£n secure:"
        echo "   ./scripts/deploy.sh $STAGE $REGION secure"
    fi
    
    echo ""
    
else
    echo "‚ùå Deployment failed!"
    exit 1
fi
